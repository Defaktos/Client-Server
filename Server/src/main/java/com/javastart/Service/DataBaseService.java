package com.javastart.Service;

import com.javastart.Entity.Account;
import com.javastart.Entity.Payment;

import java.sql.*;

public class DataBaseService {
    private static Connection getDBConnection() {
        Connection dbConnection = null;

        try {
            dbConnection = DriverManager.getConnection("jdbc:postgresql://127.0.0.1:8000/ServerClient", "postgres", "password");
            return dbConnection;
        } catch (SQLException e) {
            e.getMessage();
        }
        return dbConnection;
    }
    public void createTable() throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;

        String createAccountSQL = "CREATE TABLE IF NOT EXISTS ACCOUNT ("
                + "ID INTEGER UNIQUE NOT NULL , "
                + "USERNAME VARCHAR(255) NOT NULL , "
                + "PRIMARY KEY (ID)"
                + ")";

        String createBillSQL = "CREATE TABLE IF NOT EXISTS BILL  ("
                + "ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY , "
                + "ACCOUNT_ID INTEGER NOT NULL , "
                + "BILL INTEGER NOT NULL , "
                + "PRIMARY KEY (ID) , "
                + "FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID)"
                + ")";

        String createPaymentSQL = "CREATE TABLE IF NOT EXISTS PAYMENT ("
                + "ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY , "
                + "PAYMENT INTEGER NOT NULL , "
                + "ACCOUNT_ID INTEGER NOT NULL , "
                + "PRIMARY KEY (ID) , "
                + "FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID)"
                + ")";

        try {
            dbConnection = getDBConnection();
            statement = dbConnection.createStatement();
            statement.execute(createAccountSQL);
            statement.execute(createBillSQL);
            statement.execute(createPaymentSQL);
            System.out.println("PROGRAM:\nConnection Established\n" + "DataBase Has 3 Tables (Account, Bill, Payment)\n");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            } if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }
    public void addToTable(Account account) throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;

        String updateAccountSQL = "INSERT INTO ACCOUNT (ID , USERNAME) "
                + "VALUES (" + account.getId() + " , '" + account.getName() + "')";

        String updateBillSQL = "INSERT INTO BILL (ACCOUNT_ID , BILL) "
                + "VALUES (" + account.getId() + " , " + account.getBill().getAccountBill() + ")";

        try {
            dbConnection = getDBConnection();
            statement = dbConnection.createStatement();
            statement.executeUpdate(updateAccountSQL);
            statement.executeUpdate(updateBillSQL);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            } if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }
    public String updateTable(Payment payment) throws SQLException {
        Connection dbConnection = null;
        Statement statement = null;

        String updatePaymentSQL = "INSERT INTO PAYMENT (PAYMENT , ACCOUNT_ID) "
                + "VALUES (" + payment.getAccountPayment() + " , " + payment.getId() + ")";

        String updateBill = "UPDATE BILL "
                + "SET BILL = BILL - "  + payment.getAccountPayment()
                + "WHERE ACCOUNT_ID = " + payment.getId();

        String requestToBill = "SELECT * FROM BILL "
                + "WHERE ACCOUNT_ID = " + payment.getId();

        try {
            dbConnection = getDBConnection();
            statement = getDBConnection().createStatement();
            statement.executeUpdate(updatePaymentSQL);
            statement.executeUpdate(updateBill);
            ResultSet resultSet = statement.executeQuery(requestToBill);

            while (resultSet.next()) {
                String currentBill = resultSet.getNString(3);
                return currentBill;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (statement != null) {
                statement.close();
            } if (dbConnection != null) {
                dbConnection.close();
            }
        }
        return null;
    }
}
